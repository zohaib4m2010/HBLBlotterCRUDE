@model WebBlotter.Models.SBP_BlotterTrade
@{
                /**/

                ViewBag.Title = "Edit";
                Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<h2>Update Blotter Trade</h2>


@using (Html.BeginForm("Update", "BlotterTrade", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <Fieldset>
        <div class="form-horizontal">
            <h2>Blotter Trade As On @ViewData["SysCurrentDt"]</h2>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.SNo)
            <div class="form-group">
                <label class="control-label col-md-2">Select Type</label>
                <div class="col-md-10">
                    <select name="TTID" class="form-control">
                        @foreach (var item in ViewBag.TradeTransactionTitles)
                        {
                            if (Model.TTID == item.TTID)
                            {
                                <option value="@item.TTID" selected="selected">@item.TranctionTitle</option>
                            }
                            else
                            {
                                <option value="@item.TTID">@item.TranctionTitle</option>
                            }
                        }
                    </select>
                </div>
            </div>
            @if ((bool)ViewData["isDateChangable"])
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Trade_Date, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.EditorFor(model => model.Trade_Date, new { htmlAttributes = new { @class = "form-control datepicker" } })

                        @Html.ValidationMessageFor(model => model.Trade_Date, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
                <div class="form-group">
                    @Html.LabelFor(model => model.Trade_InFlow, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Trade_InFlow, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Trade_InFlow, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Trade_OutFLow, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Trade_OutFLow, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Trade_OutFLow, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input class="form-control" type="submit" value="Update" />
                    </div>
                </div>
            </div>
    </Fieldset>
}