@model WebBlotter.Models.SBP_BlotterClearing
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<h2>Create</h2>

@using (Html.BeginForm("Create", "BlotterClearing", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <Fieldset>
        <div class="form-horizontal">
            <h2>Blotter Clearing As On @ViewData["SysCurrentDt"]</h2>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                <label class="control-label col-md-2">Select Type</label>
                <div class="col-md-10">
                    @*@Html.DropDownListFor(model2 => model2.TTTID, new SelectList(Model.TTTID.ToString(), "datavaluefield", "datatextfield", Model.TTTID))*@
                    <select name="TTID" class="form-control">
                        @foreach (var item in ViewBag.ClearingTransactionTitles)
                        {
                            <option value="@item.TTID">@item.TranctionTitle</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Clearing_Date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.EditorFor(model => model.Clearing_Date, new { htmlAttributes = new { @class = "form-control datepicker" } })

                    @Html.ValidationMessageFor(model => model.Clearing_Date, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Clearing_InFlow, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Clearing_InFlow, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Clearing_InFlow, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Clearing_OutFLow, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Clearing_OutFLow, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Clearing_OutFLow, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input class="form-control" type="submit" value="Create" />
                </div>
            </div>
        </div>
    </Fieldset>

}