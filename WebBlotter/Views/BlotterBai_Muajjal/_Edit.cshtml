@model WebBlotter.Models.SBP_BlotterBai_Muajjal
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<h2>Update Blotter Bai_Muajjal</h2>


@using (Html.BeginForm("Update", "BlotterBai_Muajjal", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <Fieldset>
        <div class="form-horizontal">
            @*<h2>Blotter Bai_Muajjal As On @ViewData["SysCurrentDt"]</h2>*@
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.SNo)
            @if (Session["BR"].ToString() != "01")
            {
                <div class="form-group">
                    <label class="control-label col-md-2">Data Type</label>
                    <div class="col-md-10">
                        <select name="DataType" class="form-control">
                            <option value="SBP">State Bank of Pakistan</option>
                            <option value="HBLC">Inter Branch Account</option>
                        </select>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group" style="display:none;">
                    >
                    <label class="control-label col-md-2">Data Type</label>
                    <div class="col-md-10">
                        <select name="DataType" class="form-control">
                            <option value="SBP">State Bank of Pakistan</option>
                        </select>
                    </div>
                </div>
            }
            @if ((bool)ViewData["isDateChangable"])
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.ValueDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.EditorFor(model => model.ValueDate, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control datepicker",
                           @Value = Model.ValueDate.Value.Date.ToString("yyyy-MM-dd")
                       }
                   })

                        @Html.ValidationMessageFor(model => model.ValueDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            <div class="form-group">
                @Html.LabelFor(model => model.MaturityDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.EditorFor(model => model.MaturityDate, new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control datepicker",
                       @Value = Model.MaturityDate.Value.Date.ToString("yyyy-MM-dd")
                   }
               })

                    @Html.ValidationMessageFor(model => model.MaturityDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BM_InFlow, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BM_InFlow, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BM_InFlow, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BM_OutFLow, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BM_OutFLow, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BM_OutFLow, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input class="form-control" type="submit" value="Update" />
                </div>
            </div>
        </div>
    </Fieldset>
}
